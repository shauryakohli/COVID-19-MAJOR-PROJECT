# -*- coding: utf-8 -*-
"""Covid19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zfkc0AdI5Q_fEpf3TI65uIeJ0anxH2aQ
"""

cd '/content/drive/MyDrive'

import pandas as pd
df=pd.read_csv('/content/drive/MyDrive/COVID-19 Cases(02-12-2020).csv')
df

df.info()

df_india=df.iloc[0:266]
df_india

df_india.shape

df_state=df.iloc[267:9339]
df_state

df_state.shape

df_world=df.iloc[9339:9581]
df_world

df_world.shape

df_delhi=df.iloc[2255:2519]
df_delhi

#Summary of Total Active Cases as on 2/12/2020
TotalActiveCases=df.groupby("Region")["Active Cases"].sum().sort_values(ascending=False).to_frame()
TotalActiveCases.style.background_gradient(cmap='Oranges')

import matplotlib.pyplot as plt
import seaborn as sns
df_india.plot(xlabel = 'Date',x='Date', y = 'Confirmed Cases', color = 'green',ylabel='Confirmed Cases in 10lakhs')
plt.tick_params(axis='x', which='major')
plt.title("India Coronavirus Cases")
plt.legend()
plt.show()

df_world.drop(['Cured/Discharged'],axis=1,inplace=True)
df_world

df_world.plot(xlabel = 'Date',x="Date", y = 'Confirmed Cases', color = 'red',ylabel='Confirmed Cases in crores')
plt.title('World Coronavirus Cases')
plt.grid()
plt.tick_params(axis='x', which='major', labelsize=8)

df_state.plot(xlabel = 'Various states of India',x="Region" ,y = 'Confirmed Cases', color = 'orange',ylabel='Confirmed Cases in 10lakhs')
plt.tick_params(axis='x', which='major', labelsize=7)

#Comparison among different parameters in India Corona Cases
sns.pairplot(df_india,kind="scatter")
plt.show()

#Comparison among different parameters in World Corona Cases
sns.pairplot(df_world,kind="scatter")
plt.show()

#Comparison among different parameters in Indian States Corona Cases
sns.pairplot(df_state,kind="scatter")
plt.show()

#Graph of Various Parameters in Corona in India
df_india.plot(y = ['Confirmed Cases','Active Cases','Cured/Discharged','Death'],figsize=(15,5))

#Graph of Various Parameters in Corona in World
df_world.plot(y = ['Confirmed Cases','Active Cases','Death'],figsize=(15,5))

#Graph of Various Parameters in Corona in Different states
df_state.plot(y = ['Confirmed Cases','Active Cases','Cured/Discharged','Death'],figsize=(15,5))

#Highest no of active cases till date in a state in India
df_state[df_state['Active Cases']==df_state['Active Cases'].max()]

#Maximum no of people cured/discharged  in India
df_india[df_india['Cured/Discharged']==df_india['Cured/Discharged'].max()]

#Total no of deaths due to COVID pandemic so far in the world
df_world[df_world['Death']==df_world['Death'].max()]

#Regions in India where Active cases are more than 1000 but deaths are less than 15
df1=df_state[(df_state['Active Cases']>1000)&(df_state['Death']<15)]
df1

#Region where more than 10 Lakh people have been cured by the COVID Pandemic
df2=df_state[(df_state['Cured/Discharged']>1000000)]
df2

#Regions and Dates in India on which 6 Deaths were reported
df1=df_state[(df_state['Death']==6.0)]
df1

#States where confirmed cases are more than 20000 but less than 50000
df_state[(df_state['Confirmed Cases']>20000)&(df_state['Confirmed Cases']<50000)]

#Max No of Active Cases in the world
df_world[df_world['Active Cases']==df_world['Active Cases'].max()]

!pip install bar_chart_race  &> /dev/null

!pip install ipython-autotime  &> /dev/null

# Commented out IPython magic to ensure Python compatibility.
# %load_ext autotime
import bar_chart_race as bcr

cd '/content/drive/MyDrive'

#Dataset to show barchat race animation for states with top 5 Active Cases
import pandas as pd
df_active=pd.read_csv('/content/drive/MyDrive/covid-19-new.csv',index_col='Date')
df_active

bcr.bar_chart_race(df=df_active,n_bars=5,filter_column_colors=True,title='COVID 19 Active Cases in India')

#National Capital Prediction
df_delhi.plot(xlabel = 'Date',x="Date", y = 'Confirmed Cases', color = 'red',ylabel='Confirmed Cases in crores')
plt.title('Delhi Coronavirus Cases')
plt.grid()
plt.tick_params(axis='x', which='major', labelsize=8)

df_delhi.plot(y = ['Confirmed Cases','Active Cases','Cured/Discharged','Death'],figsize=(15,5))

df_capital = df_delhi[['Date','Active Cases']]
df_capital.info()

df_capital = df_capital.rename(columns = {'Date':'ds','Active Cases':'y'})

df_capital

from fbprophet import Prophet
m = Prophet(changepoint_prior_scale=0.5)
m.fit(df_capital)

forecast = m.make_future_dataframe(periods = 6,freq='M')
forecast=m.predict(forecast)

forecast.columns

forecast[['ds','yhat','yhat_lower', 'yhat_upper', 'trend_lower']]

#Predicting cases 
m.plot(forecast,xlabel='Date',ylabel='Active Cases/crore');

df_new = df_india[['Date','Active Cases']]
df_new.info()

df_new = df_new.rename(columns = {'Date':'ds','Active Cases':'y'})

df_new

from fbprophet import Prophet
m = Prophet(changepoint_prior_scale=0.5)
m.fit(df_new)

forecast = m.make_future_dataframe(periods = 6,freq='M')
forecast=m.predict(forecast)

forecast.columns

forecast[['ds','yhat','yhat_lower', 'yhat_upper', 'trend_lower']]

#Predicting cases in the India in future
m.plot(forecast,xlabel='Date',ylabel='Active Cases/crore');

df_new2 = df_world[['Date','Active Cases']]
df_new2.info()

df_new2 = df_new2.rename(columns = {'Date':'ds','Active Cases':'y'})

m2 = Prophet(changepoint_prior_scale=0.5)
m2.fit(df_new2)

forecast2 = m2.make_future_dataframe(periods = 6,freq='M')
forecast2=m2.predict(forecast2)

forecast2.columns

forecast2[['ds','yhat','yhat_lower', 'yhat_upper', 'trend_lower']]

#Predicting Active cases in World in future
m2.plot(forecast2,xlabel='Date',ylabel='Active Cases/crore');